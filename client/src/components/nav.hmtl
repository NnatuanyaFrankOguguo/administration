// import React , {useState , useEffect} from 'react'
// /*useState , useEffect are the life cycle methods in react functional components */
// import axios from 'axios';

// function Roomscreen() {

//     const[rooms, setRooms] = useState([]);

//     const fetchData = async () => {

//         try {
//         const response = await axios.get("/api/rooms/getallrooms");
//         console.log(response.data.rooms)
//         setRooms(response.data.rooms);
//     } catch (error) {
//     console.log(`ERROR MESSAGE: ${error}`)}}
//     //always go with this syntax with the try catch block otherwise you will face errors

//     useEffect(()=> {
//         fetchData()
//     }, []);

//   return (
//     <div>
//         <h1>HOME SCREEN</h1>
//         <h1>There {rooms.length} rooms in total</h1>
//     </div>
//   );
// }

// export default Roomscreen;








    // const config = {
    //     reference: (new Date()).getTime().toString(),
    //     email: JSON.parse(localStorage.getItem('currentuser')).email,
    //     amount: totalamount * 100, //Amount is in the country's lowest currency. E.g Kobo, so 20000 kobo = N200
    //     publicKey: 'pk_test_5a45ca17d23a2f735a73322eb70880867abf002b',
        
    //   };
//-------------------------------------------------------------------------------------------------------------------------
      const onSuccess = async (reference) => {
        console.log('Payment successful!', reference);
         // Proceed with booking after payment /* we will make the function as async bcos here we are performing the axios operation to send the booking details to the backend */
        const bookingDetails = { /* we will send the object in a form of booking model that whatever details we kept in the booking model are what we have to send to the backend  */
            room, /*this includes room name and all other properites in the room object */
            userid : JSON.parse(localStorage.getItem('currentuser'))._id, /*to get the user user:JSON.parse(localStorage.getItem('currentUser')) but we didnt put user instead userid*/
            type : room.type,
            fromdate,
            todate,
            totalamount,
            totaldays,
            reference
        }

        try {
            const response = await axios.post('/api/bookings/bookroom', bookingDetails) /*going to create the Url in the booking route and add it server.js to receive the response(after much time we are done,
             now to process the request in the frontend sending the bookingDetails as our object (#22)- along  with the booking details we will send our reference) */
            
        } catch (error) {
            
            
        }

        
    };

    const onClose = () => {
        console.log('Payment closed without completing');
    };




for flutter wave integration backend just like how you did paystack
// importing necessary modules
const express = require("express");
const axios = require("axios");
const { v4: uuidv4 } = require("uuid");
const moment = require("moment");
const Room = require("../models/room"); // assuming you have this model
const Booking = require("../models/booking"); // assuming you have this model
const router = express.Router();

// Flutterwave secret key
const FLUTTERWAVE_SECRET_KEY = "FLWSECK-XXXXXXXXXXXXXXXXXX"; // Replace with your actual key

router.post('/bookroom', async (req, res) => {
    const { room, userid, bookingdate, type, fromdate, todate, totalamount, totaldays, transaction_id } = req.body;

    try {
        // Verify payment with Flutterwave
        const verificationResponse = await axios.get(`https://api.flutterwave.com/v3/transactions/${transaction_id}/verify`, {
            headers: {
                Authorization: `Bearer ${FLUTTERWAVE_SECRET_KEY}`,
            },
        });

        const { status, data } = verificationResponse.data;

        if (status !== "success") {
            return res.status(400).json({ error: "Payment verification failed." });
        }

        // Proceed with booking if payment is verified
        const newbooking = new Booking({
            room: room.name,
            roomid: room._id,
            userid,
            bookingdate,
            type: room.type,
            fromdate,
            todate,
            totalamount,
            totaldays,
            transactionId: data.id
        });

        const booking = await newbooking.save();

        const roomdetails = await Room.findOne({ _id: room._id });
        roomdetails.currentbookings.push({
            bookingid: booking._id,
            fromdate: fromdate,
            todate: todate,
            userid: userid,
            status: booking.status
        });

        await roomdetails.save();

        res.send("Room is booked successfully!");

    } catch (error) {
        console.error("Error during Flutterwave booking process:", error.message);
        return res.status(400).json({ error: "Payment verification failed", details: error.message });
    }
});

module.exports = router;
